@model X.PagedList.IPagedList<BMOS.Models.Entities.TblProduct>
@using X.PagedList.Mvc;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common;
@{
	Layout = "_ManagePage";
	ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
	<a style="text-decoration:none;" asp-controller="ProductManager" asp-action="Index">Xóa tìm kiếm</a>
</p>
<table class="table">
	<thead>
		<tr>
			<th>ID</th>
			<th><a style="text-decoration:none;" asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-searchString="@ViewData["SearchParameter"]">Tên ản phẩm</a></th>
			<th>Số Lương</th>
			<th>Trạng Thái</th>
			<th><a style="text-decoration:none;" asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" asp-route-searchString="@ViewData["SearchParameter"]">Money</a></th>
			<th>Trọng lượng</th>
			<th>Thông tin</th>
			<th>Hành động</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(xx => item.ProductId)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Name)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Quantity)
				</td>
				<td>
					@{
						if ((item.Status) == true)
						{
							<p style="color:green;">Con Hang </p>

						}
						else
						{
							<p style="color:red">Het Hang </p>
						}
					}
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Price)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Weight)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Status)
				</td>
				<td>
					<a asp-action="Edit" asp-route-id="@item.ProductId">Edit</a> |
					<a asp-action="Details" asp-route-id="@item.ProductId">Details</a> |
					<a asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>
<br />
<br />
<div style="font-size:2rem; margin-bottom:2rem; margin-left:1rem;">
	Trang @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) tren @Model.PageCount
</div>

<div style="font-size:1rem; margin-bottom:2rem; margin-left:1rem;">
	@Html.PagedListPager(Model, page => Url.Action("Index",
	new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }),
	new PagedListRenderOptions {
	LiElementClasses = new string[] { "page-item" },
	PageClasses = new string[] { "page-link" }
	})

</div>